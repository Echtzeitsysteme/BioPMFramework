/*
 * generated by Xtext 2.12.0
 */
package de.tu.darmstadt.es.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import de.tu.darmstadt.es.kappaLite.KLIFile
import de.tu.darmstadt.es.utils.KappaLiteUtil
import org.eclipse.emf.common.util.URI
import org.eclipse.xtext.EcoreUtil2
import de.tu.darmstadt.es.kappaLite.KLIRule

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class KappaLiteGenerator extends AbstractKappaLiteGernerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val contents = resource.contents
		
		if (contents.size > 0) {
			val file = contents.get(0)
			if (file instanceof KLIFile) {
				val ratingExprs=EcoreUtil2.eAllOfType(file, KLIRule).map[rule | rule.rrating];
				val ratings=ratingExprs.map[expr | this.solveExpression(expr)].toList
				val kappaContainer = this.convert(file)
				val uri = createURIFromResource(resource, "model", "convertedKappa.xmi")
				KappaLiteUtil.instance.save(kappaContainer,uri, resource.resourceSet)

			}
		}
		
	}
	
	def URI createURIFromResource(Resource resource, String folder, String file){
		val originUri = resource.URI
		val segments = originUri.toString.split("/")
		if(segments.length>=3){
			val prefix = segments.get(0)+ "/" + segments.get(1) + "/" + segments.get(2) +"/"
			val path = prefix+folder+"/"+file
			return URI.createURI(path)
		}
		return originUri
	}
}
