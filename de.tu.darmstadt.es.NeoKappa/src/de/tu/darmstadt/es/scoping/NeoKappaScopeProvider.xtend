/*
 * generated by Xtext 2.12.0
 */
package de.tu.darmstadt.es.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import de.tu.darmstadt.es.neoKappa.NKASiteDescription
import de.tu.darmstadt.es.neoKappa.NKAAgentDescription
import de.tu.darmstadt.es.neoKappa.NKASite
import de.tu.darmstadt.es.neoKappa.NKAStateDescription
import de.tu.darmstadt.es.neoKappa.NKAState

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class NeoKappaScopeProvider extends AbstractNeoKappaScopeProvider {
	override getScope(EObject context, EReference reference) {
		if(context instanceof NKASiteDescription && reference.name === "site"){
			val agentDes = context.eContainer as NKAAgentDescription
			val candidates = EcoreUtil2.getAllContentsOfType(agentDes.agent, NKASite)
			return Scopes.scopeFor(candidates)			
		}
		
		if(context instanceof NKAStateDescription){
			val agentDes = context.eContainer as NKASiteDescription
			val candidates = EcoreUtil2.getAllContentsOfType(agentDes.site, NKAState)
			return Scopes.scopeFor(candidates)			
		}
		
		super.getScope(context,reference)
	}
}
